"""initial schema

Revision ID: ccd552b49a8b
Revises:
Create Date: 2025-02-07 22:33:07.323376

"""

from typing import Sequence
from uuid import uuid4

import sqlalchemy as sa
from alembic import op

from users.config import UserServiceConfigurations
from users.core.users.domain.user import User

# revision identifiers, used by Alembic.
revision: str = "ccd552b49a8b"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "roles",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password_hash", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "permissions",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("namespace", sa.String(), nullable=False),
        sa.Column("role_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "profiles",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("phone_number", sa.String(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("state", sa.String(), nullable=False),
        sa.Column("zip_code", sa.String(), nullable=False),
        sa.Column("country", sa.String(), nullable=False),
        sa.Column("avatar", sa.String(), nullable=True),
        sa.Column("bio", sa.String(), nullable=True),
        sa.Column("website", sa.String(), nullable=True),
        sa.Column("birth_date", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "refresh_tokens",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("token", sa.String(), nullable=False),
        sa.Column("expiration", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("token"),
    )
    op.create_table(
        "user_roles",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("role_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "role_id"),
    )

    # Insert default roles
    admin_role_id = str(uuid4())
    user_role_id = str(uuid4())
    op.execute(
        f"""
        INSERT INTO roles (id, name) VALUES
        ('{admin_role_id}', 'admin'),
        ('{user_role_id}', 'user')
        """
    )

    # Insert default permissions
    op.execute(
        f"""
        INSERT INTO permissions (id, name, namespace, role_id) VALUES
        ('{uuid4()}', '', 'users', '{admin_role_id}'),
        ('{uuid4()}', 'write', 'users', '{admin_role_id}'),
        ('{uuid4()}', '', 'users:self', '{admin_role_id}'),
        ('{uuid4()}', 'write', 'users:self', '{admin_role_id}'),
        ('{uuid4()}', '', 'users:self', '{user_role_id}'),
        ('{uuid4()}', 'write', 'users:self', '{user_role_id}')
        """
    )

    # Insert admin user
    config = UserServiceConfigurations()
    user = User(email=config.ADMIN_EMAIL, password_hash="")
    user.set_password(config.ADMIN_PASSWORD)
    admin_user_id = str(uuid4())
    admin_email = user.email
    admin_password_hash = user.password_hash
    op.execute(
        f"""
        INSERT INTO users (id, email, password_hash) VALUES
        ('{admin_user_id}', '{admin_email}', '{admin_password_hash}')
        """
    )

    # Insert admin profile
    op.execute(
        f"""
        INSERT INTO profiles (
            user_id,
            email,
            first_name,
            last_name,
            phone_number,
            address,
            city,
            state,
            zip_code,
            country,
            avatar,
            bio,
            website,
            birth_date
        ) VALUES (
            '{admin_user_id}',
            '{admin_email}',
            'Admin',
            'User',
            '',
            '',
            '',
            '',
            '',
            '',
            '',
            NULL,
            NULL,
            NULL
        )
        """
    )

    # Assign admin role to admin user
    op.execute(
        f"""
        INSERT INTO user_roles (user_id, role_id) VALUES
        ('{admin_user_id}', '{admin_role_id}')
        """
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_roles")
    op.drop_table("refresh_tokens")
    op.drop_table("profiles")
    op.drop_table("permissions")
    op.drop_table("users")
    op.drop_table("roles")
    # ### end Alembic commands ###
