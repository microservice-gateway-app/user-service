"""initial schema

Revision ID: 74b4cff45ac3
Revises: 
Create Date: 2025-01-26 16:01:27.099359

"""

from typing import Sequence, Union
import uuid

from alembic import op
import sqlalchemy as sa

from users.config import UserServiceConfigurations
from users.core.services.user_services import hash_password


# revision identifiers, used by Alembic.
revision: str = "74b4cff45ac3"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    permissions = op.create_table(
        "permissions",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("scope_name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("scope_name"),
    )
    roles = op.create_table(
        "roles",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    users = op.create_table(
        "users",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("middle_name", sa.String(), nullable=True),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.func.now(),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "refresh_tokens",
        sa.Column("id", sa.String(), primary_key=True),
        sa.Column("token", sa.String(), nullable=False, unique=True),
        sa.Column("expiration", sa.DateTime(timezone=True), nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
    )
    role_permissions = op.create_table(
        "role_permissions",
        sa.Column("role_id", sa.String(), nullable=False),
        sa.Column("permission_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.PrimaryKeyConstraint("role_id", "permission_id"),
    )
    user_roles = op.create_table(
        "user_roles",
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("role_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "role_id"),
    )
    # create default roles
    user_role_id = str(uuid.uuid4())
    admin_role_id = str(uuid.uuid4())
    user_id = str(uuid.uuid4())
    op.bulk_insert(
        table=roles,
        rows=[
            {"id": user_role_id, "name": "user"},
            {"id": admin_role_id, "name": "admin"},
        ],
    )
    # create default admin account
    config = UserServiceConfigurations()
    op.bulk_insert(
        table=users,
        rows=[
            {
                "id": user_id,
                "email": config.ADMIN_EMAIL,
                "password": hash_password(config.ADMIN_PASSWORD),
                "first_name": config.ADMIN_FIRST_NAME,
                "middle_name": config.ADMIN_MIDDLE_NAME,
                "last_name": config.ADMIN_LAST_NAME,
            }
        ],
    )
    op.bulk_insert(
        table=user_roles,
        rows=[
            {
                "user_id": user_id,
                "role_id": admin_role_id,
            }
        ],
    )
    scopes = {
        "users": str(uuid.uuid4()),
        "users.write": str(uuid.uuid4()),
        "users:self": str(uuid.uuid4()),
        "users:self.write": str(uuid.uuid4()),
    }
    op.bulk_insert(
        table=permissions,
        rows=[
            {"id": scopes["users"], "scope_name": "users", "description": "User scope"},
            {
                "id": scopes["users.write"],
                "scope_name": "users.write",
                "description": "Write access to user scope",
            },
            {
                "id": scopes["users:self"],
                "scope_name": "users:self",
                "description": "Self access to user scope",
            },
            {
                "id": scopes["users:self.write"],
                "scope_name": "users:self.write",
                "description": "Write access to self user scope",
            },
        ],
    )
    op.bulk_insert(
        table=role_permissions,
        rows=[
            {
                "role_id": user_role_id,
                "permission_id": scopes["users:self"],
            },
            {
                "role_id": user_role_id,
                "permission_id": scopes["users:self.write"],
            },
            # for admin role
            {
                "role_id": admin_role_id,
                "permission_id": scopes["users"],
            },
            {
                "role_id": admin_role_id,
                "permission_id": scopes["users.write"],
            },
            {
                "role_id": admin_role_id,
                "permission_id": scopes["users:self"],
            },
            {
                "role_id": admin_role_id,
                "permission_id": scopes["users:self.write"],
            },
        ],
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_roles")
    op.drop_table("role_permissions")
    op.drop_table("refresh_tokens")
    op.drop_table("users")
    op.drop_table("roles")
    op.drop_table("permissions")
    # ### end Alembic commands ###
